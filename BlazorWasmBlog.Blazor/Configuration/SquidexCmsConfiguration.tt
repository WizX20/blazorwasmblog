<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#
    IServiceProvider serviceProvider = (IServiceProvider)this.Host;
    DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE;
    var solutionPath = Path.GetDirectoryName(dte.Solution.FullName);
    var templatePath = Host.TemplateFile.Replace(solutionPath, ".");

    var path = Host.ResolvePath("");
    var files = Directory.GetFiles(path, "*.json", SearchOption.AllDirectories);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//  This code was generated by a tool.
//  For the template that generated the code please refer to:
//  <#= templatePath #>
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using BlazorWasmBlog.Core.Infrastructure.Configuration;
using System.Diagnostics.CodeAnalysis;

namespace BlazorWasmBlog.Blazor.Configuration
{
    [ExcludeFromCodeCoverage]
    public class SquidexCmsConfigurationSettings : IConfigurationSettings
    {
<#
    var configMethods = new List<string[]>();

    foreach (var file in files)
    {
        var fileName = Path.GetFileNameWithoutExtension(file);
        var configEnvName = "Default";
        
        var fileNameParts = fileName.Split(new[] { '.' });
        if (fileNameParts.Length > 1)
        {
            configEnvName = fileNameParts[fileNameParts.Length - 1];
        }
        
        var methodName = Path.GetFileNameWithoutExtension(file).Replace(".", "_");
        configMethods.Add(new[] { configEnvName, methodName });
#>
        /// <summary>
        /// <#= file.Replace(path, "").Trim('\\') #>
        /// </summary>
        public const string <#= methodName #> = 
            @"<#= File.ReadAllText(file).Replace("\"", "\"\"") #>";
<# } #>
        
        public string GetSettings(string environmentName)
        {
            if (string.IsNullOrEmpty(environmentName))
            {
                environmentName= "Default";
            }

<#
        foreach (var configMethod in configMethods)
        {          
#>
            if (environmentName.Equals("<#= configMethod[0] #>", System.StringComparison.OrdinalIgnoreCase))
            {
                return <#= configMethod[1] #>;
            }

<#      } #>
            return string.Empty;
        }
    }
}